<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flappy Bird Mini-Game</title>
    <style>
        body {
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #70c5ce;
            font-family: Arial, sans-serif;
        }
        canvas {
            background-color: #70c5ce;
            border: 2px solid #000;
        }
    </style>
</head>
<body>

<canvas id="flappyCanvas" width="320" height="480"></canvas>

<script>
    // Canvas setup
    const canvas = document.getElementById('flappyCanvas');
    const ctx = canvas.getContext('2d');

    // Bird setup
    const bird = {
        x: 50,
        y: 150,
        width: 20,
        height: 20,
        gravity: 0.6,
        lift: -15,
        velocity: 0,
        draw() {
            ctx.fillStyle = '#ffcc00';
            ctx.fillRect(this.x, this.y, this.width, this.height);
        },
        flap() {
            this.velocity = this.lift;
        },
        update() {
            this.velocity += this.gravity;
            this.y += this.velocity;

            if (this.y + this.height > canvas.height || this.y < 0) {
                this.y = canvas.height / 2; // Reset if it hits the ground or goes too high
                this.velocity = 0;
            }
        }
    };

    // Pipe setup
    const pipes = [];
    const pipeWidth = 40;
    const pipeGap = 120;
    const pipeSpeed = 2;

    function createPipe() {
        const pipeHeight = Math.floor(Math.random() * (canvas.height - pipeGap));
        pipes.push({
            x: canvas.width,
            y: pipeHeight,
            width: pipeWidth,
            height: pipeHeight
        });
    }

    function drawPipes() {
        pipes.forEach((pipe, index) => {
            ctx.fillStyle = '#00cc00';
            ctx.fillRect(pipe.x, 0, pipe.width, pipe.height);
            ctx.fillRect(pipe.x, pipe.height + pipeGap, pipe.width, canvas.height - pipe.height - pipeGap);

            pipe.x -= pipeSpeed;

            // Remove pipe if off the screen
            if (pipe.x + pipe.width < 0) {
                pipes.splice(index, 1);
            }

            // Collision detection
            if (
                bird.x < pipe.x + pipe.width &&
                bird.x + bird.width > pipe.x &&
                (bird.y < pipe.height || bird.y + bird.height > pipe.height + pipeGap)
            ) {
                resetGame();
            }
        });
    }

    // Game reset
    function resetGame() {
        bird.y = canvas.height / 2;
        bird.velocity = 0;
        pipes.length = 0;
        score = 0;
        createPipe();
    }

    // Game loop
    let score = 0;
    function gameLoop() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        bird.update();
        bird.draw();

        if (pipes.length > 0 && pipes[0].x < bird.x - pipeWidth) {
            score++;
            createPipe();
        }

        drawPipes();

        ctx.fillStyle = '#000';
        ctx.font = '20px Arial';
        ctx.fillText('Score: ' + score, 10, 30);

        requestAnimationFrame(gameLoop);
    }

    // Event listener for bird flap
    document.addEventListener('keydown', function(e) {
        if (e.code === 'Space') {
            bird.flap();
        }
    });

    // Start game
    createPipe();
    gameLoop();
</script>

</body>
</html>
